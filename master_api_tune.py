import csv 
import numpy as np
import random as ran
import sys
#import matplotlib.pyplot as plt
import math
from sklearn.model_selection import StratifiedKFold
from sklearn.semi_supervised import LabelLambda
from sklearn.semi_supervised import LabelSpreading
from sklearn.semi_supervised import LabelPropagation
from sklearn.naive_bayes import BernoulliNB
from sklearn.neighbors import KNeighborsClassifier

splits=5
seed=82948749203
ran.seed(seed)
threshold=10
jobs=4

malware=1
benign=0
unlab=-1

inp=sys.argv[1]
write_file='2skipgram_tuning'+str(inp)+'.csv'
inp=inp.split('_')

gamma=float(2**float(inp[0]))
kNN=int(inp[1])
kern=inp[2]
method=inp[3]
l_mal=int(inp[4])
l_ben=int(inp[5])
u_mal=int(inp[6])
u_ben=int(inp[7])

read_file='2skipgram_api_embed_labeled.csv'


def load_data():
    ben_apps, mal_apps= [],[]
    with open(read_file) as csvfile:
        spamreader = csv.reader(csvfile,delimiter=' ', quotechar='|')
        for row in spamreader:
            r=row[0].split(',')
            if not math.isnan(float(r[1])):
                if int(r[-1])==0:
                    ben_apps.append(r)
                elif int(r[-1])==1:
                    mal_apps.append(r)
                            
    return ben_apps,mal_apps

def stats(trainY,evaledY,expectedY):
    lm_to_b,lb_to_m,tp,tn,fp,fn=0,0,0,0,0,0

    for i in range(len(evaledY)):
        if trainY[i]!=unlab:
            if expectedY[i]==malware:
                if evaledY[i]==benign:
                    lm_to_b+=1
            else:
                if evaledY[i]==malware:
                    lb_to_m+=1

        else:
            if expectedY[i]==malware:
                if evaledY[i]==malware:
                    tp+=1
                else:
                    fn+=1
            else:
                if evaledY[i]==malware:
                    fp+=1
                else:
                    tn+=1


    return lm_to_b,lb_to_m,tp,tn,fp,fn

def build_matrix(train,test):
    tot=len(train)+len(test)

    xTrain=np.zeros((tot,100))
    yTrain=np.zeros((tot,1))
    yExpect=np.zeros((tot,1))


    for i in range(len(train)):

        app=train[i]
        label=int(app[-1])
        for p in range(1,len(app)-1):
            xTrain[i][p-1]=float(app[p])

        
        yTrain[i]=label
        yExpect[i]=label

    for i in range(len(test)):
        app=test[i]
        label=int(app[-1])

        for p in range(1,len(app)-1):
            xTrain[i+len(train)][p-1]=float(app[p])

        yExpect[i+len(train)]=label
        yTrain[i+len(train)]=unlab

    return xTrain,yTrain, yExpect

def soft_clamping(kernel,xTrain,yTrain,g=0.6,MI=10000,k=3,a=0.1):
    spread = LabelSpreading(kernel=kernel,n_neighbors=k,gamma=g,alpha=a,max_iter=MI,n_jobs=-1)
    spread.fit(xTrain, yTrain)
    evaledY=spread.predict(xTrain)

    #def stats(trainY,evaledY,expectedY,day_one): return
    lm_to_b,lb_to_m,tp,tn,fp,fn= stats(yTrain,evaledY,yExpect)

    results=['SC',kernel,k,g,a,lm_to_b,lb_to_m,tp,tn,fp,fn]
    write_csv(results)

    predY=spread.predict_proba(xTrain)
    norm_Y=normalize(yTrain,predY)
    labels=[]
    for i in norm_Y:
        if i[0]>i[1]:
            labels.append(benign)
        elif i[0]<i[1]:
            labels.append(malware)

    lm_to_b,lb_to_m,tp,tn,fp,fn= stats(yTrain,labels,yExpect)
    
    results=['SC CMN',kernel,k,g,a,lm_to_b,lb_to_m,tp,tn,fp,fn]
    write_csv(results)

def hard_clamping(kernel,xTrain,yTrain,g=0.6,MI=10000,k=3):
    prop = LabelPropagation(kernel=kernel,n_neighbors=k,gamma=g,max_iter=MI,n_jobs=-1)
    prop.fit(xTrain, yTrain)
    evaledY=prop.predict(xTrain)
    #def stats(trainY,evaledY,expectedY,day_one): return
    lm_to_b,lb_to_m,tp,tn,fp,fn = stats(yTrain,evaledY,yExpect)

    results=['HC MAX',kernel,k,g,lm_to_b,lb_to_m,tp,tn,fp,fn]
    write_csv(results)

    predY=prop.predict_proba(xTrain)
    norm_Y=normalize(yTrain,predY)
    labels=[]
    for i in norm_Y:
        if i[0]>i[1]:
            labels.append(benign)
        elif i[0]<i[1]:
            labels.append(malware)

    lm_to_b,lb_to_m,tp,tn,fp,fn= stats(yTrain,labels,yExpect)
    
    results=['HC CMN',kernel,k,g,lm_to_b,lb_to_m,tp,tn,fp,fn]

    write_csv(results)

def variant(xTrain,yTrain,lm_alpha,lb_alpha,um_alpha,ub_alpha,kernel,k=3,g=0.6,MI=10000):
    lamb=[]
    for i in range(len(yTrain)):
        if yTrain[i]==malware:
            lamb.append(lm_alpha)
        elif yTrain[i]==benign:
            lamb.append(lb_alpha)

        elif yTrain[i]==unlab:
            lamb.append(um_alpha)

    lp = LabelLambda(kernel=kernel,n_neighbors=k,gamma=g,lam=lamb,max_iter=MI,n_jobs=-1)
    lp.fit(xTrain, yTrain)
    evaledY=lp.predict(xTrain)

    #def stats(trainY,evaledY,expectedY,day_one): return
    lm_to_b,lb_to_m,tp,tn,fp,fn = stats(yTrain,evaledY,yExpect)

    results=['Var MAX',kernel,k,g,lm_alpha,lb_alpha,ub_alpha,lm_to_b,lb_to_m,tp,tn,fp,fn]
    write_csv(results)

    predY=lp.predict_proba(xTrain)
    norm_Y=normalize(yTrain,predY)
    labels=[]
    for i in norm_Y:
        if i[0]>i[1]:
            labels.append(benign)
        elif i[0]<i[1]:
            labels.append(malware)

    lm_to_b,lb_to_m,tp,tn,fp,fn= stats(yTrain,labels,yExpect)
    
    results=['Var CMN',kernel,k,g,lm_alpha,lb_alpha,ub_alpha,lm_to_b,lb_to_m,tp,tn,fp,fn]
    write_csv(results)

def k_nearest(xTrain,yTrain,k=3):
    neigh = KNeighborsClassifier(n_neighbors=k,n_jobs=-1)

    neigh.fit(xTrain, yTrain)

    evaledY=neigh.predict(xTrain)

    lm_to_b,lb_to_m,tp,tn,fp,fn= stats(yTrain,evaledY,yExpect)

    results=['KNN MAX',k,lm_to_b,lb_to_m,tp,tn,fp,fn]
    write_csv(results)


    predY=neigh.predict_proba(xTrain)
    norm_Y=normalize(yTrain,predY)
    labels=[]
    for i in norm_Y:
        if i[0]>i[1]:
            labels.append(benign)
        elif i[0]<i[1]:
            labels.append(malware)

    lm_to_b,lb_to_m,tp,tn,fp,fn= stats(yTrain,labels,yExpect)
    
    results=['KNN CMN',k,lm_to_b,lb_to_m,tp,tn,fp,fn]

    write_csv(results)

def NB(xTrain,yTrain,MI=1000):
    clf = BernoulliNB()
    clf.fit(xTrain, yTrain)

    evaledY=clf.predict(xTrain)
    lm_to_b,lb_to_m,tp,tn,fp,fn= stats(yTrain,evaledY,yExpect)

    results=['NB MAX',lm_to_b,lb_to_m,tp,tn,fp,fn]
    write_csv(results)


    predY=clf.predict_proba(xTrain)
    norm_Y=normalize(yTrain,predY)
    labels=[]
    for i in norm_Y:
        if i[0]>i[1]:
            labels.append(benign)
        elif i[0]<i[1]:
            labels.append(malware)

    lm_to_b,lb_to_m,tp,tn,fp,fn= stats(yTrain,labels,yExpect)
    
    results=['NB CMN',lm_to_b,lb_to_m,tp,tn,fp,fn]
    write_csv(results)

def write_csv(data):
    with open(write_file, "a") as f:
        for i in data:
            f.write(str(i))
            f.write(",")
        f.write("\n")

def normalize(yTrain,predY):   
    p_mal=0
    p_ben=0
    l=0
    for i in yTrain:
        if i == malware:
            l+=1
            p_mal+=1
        elif i == benign:
            l+=1
            p_ben+=1
    p_mal/=l
    p_ben/=l
    
    m_mal=0
    m_ben=0
    u=len(predY)-l
    
    for i in range(l,len(predY)):
         m_mal+=predY[i][1]
         m_ben+=predY[i][0]
    m_mal/=u
    m_ben/=u
    
    w_mal=p_mal/m_mal
    w_ben=p_ben/m_ben
    
    for i in predY:
        i[0]*=w_ben
        i[1]*=w_mal
    return predY

ben_apps,mal_apps = load_data()
alpha_values=[i/10 for i in range(1,10)]

k_neigh=[3,5,7,9,11]

#for the 5 samples 
for i in range(5):

    labeled_small=[]
    unlabeled_small=[]
    labeled_small.extend(ben_apps[:l_ben])
    labeled_small.extend(mal_apps[:l_mal])
    unlabeled_small.extend(ben_apps[l_ben:(l_ben+u_ben)])
    unlabeled_small.extend(mal_apps[l_mal:(l_mal+u_mal)])

    xTrain,yTrain, yExpect =  build_matrix(labeled_small,unlabeled_small)
    print("built matrix: "+str(len(xTrain)),flush=True)


    if method=="var":
        for u_a in alpha_values:
            for l_a in alpha_values:
                #checking upload
                variant(xTrain,yTrain.ravel(),l_a,l_a,u_a,u_a,kern,kNN,g=gamma)
    elif method=="sc":
        for sc_a in alpha_values:
            soft_clamping(kern,xTrain,yTrain.ravel(),k=kNN,g=gamma,a=sc_a)
    elif method=="hc":
        hard_clamping(kern,xTrain,yTrain.ravel(),g=gamma,k=kNN)
    elif method=="knn":
        for k in k_neigh:
            k_nearest(xTrain,yTrain.ravel(),k)
    elif method=="nb":
        NB(xTrain,yTrain.ravel())

    ran.shuffle(ben_apps)
    ran.shuffle(mal_apps)
